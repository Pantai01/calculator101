{
	"info": {
		"_postman_id": "34b37ff3-0356-424b-972f-dc340cc6155e",
		"name": "calculator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39582013"
	},
	"item": [
		{
			"name": "addTest001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a single number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to 0\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.equal(0);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add?num1=0&num2=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "num1",
							"value": "0"
						},
						{
							"key": "num2",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "addTest002",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a single number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to 1\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.equal(1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add?num1=0&num2=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "num1",
							"value": "0"
						},
						{
							"key": "num2",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "addTest003",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a single number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to -1\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.equal(-1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add?num1=0&num2=-1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "num1",
							"value": "0"
						},
						{
							"key": "num2",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "addTest004",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.path).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate error is a Bad Request\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.error).equal(\"Bad Request\");\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add?num1=0&num2=π",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "num1",
							"value": "0"
						},
						{
							"key": "num2",
							"value": "π"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "substractionTest001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a single number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to 1\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.equal(1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/sub?num1=0&num2=-1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"sub"
					],
					"query": [
						{
							"key": "num1",
							"value": "0"
						},
						{
							"key": "num2",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "substractionTest002",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in a valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a single number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to 1309.1\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.equal(1309.1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/sub?num1=1432.2&num2=123.1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"sub"
					],
					"query": [
						{
							"key": "num1",
							"value": "1432.2"
						},
						{
							"key": "num2",
							"value": "123.1"
						}
					]
				}
			},
			"response": []
		}
	]
}